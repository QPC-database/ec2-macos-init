# Default EC2 macOS Init init.toml config for mac1.metal instances

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You
# may not use this file except in compliance with the License. A copy of
# the License is located at
#
# http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the specific
# language governing permissions and limitations under the License.


### Group 1 ###
## The only task in the first group is to make sure the network is up.  Some of the subsequent actions require
## a connection to IMDS and will fail if this check doesn't pass.

# Checks that the network is up
[[Module]]
Name = "CheckNetworkIsUp"
PriorityGroup = 1 # First group
RunPerBoot = true # Run every boot
FatalOnError = true # Fatal if there's an error - this must succeed
[Module.NetworkCheck]
PingCount = 3 # Three attempts

### Group 2 ###
## The second group has many actions that can be run in parallel including:
##   1. Optimize kernel and networking parameters
##   2. Disable auto-update
##   3. Reset a random password for ec2-user
##   4. Set the default timezone (GMT)
##   5. Set timed to use Amazon Time Sync Service
##   6. Update MOTD
##   7. Remove SSH group

# Set kern.aiomax=900
[[Module]]
Name = "Set-kern.aiomax"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["sysctl", "-w", "kern.aiomax=900"] # Use sysctl to set property

# Set kern.aioprocmax=256
[[Module]]
Name = "Set-kern.aioprocmax"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["sysctl", "-w", "kern.aioprocmax=256"] # Use sysctl to set property

# Set kern.aiothreads=64
# We use "|| true" on this one because this property errors if equal or lower
[[Module]]
Name = "Set-kern.aiothreads"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["/bin/zsh", "-c", "[ $(sysctl kern.aiothreads | cut -d' ' -f2) -le 64 ] && sysctl -w kern.aiothreads=64 || true"] # Use sysctl to set property

# Set net.inet.tcp.win_scale_factor=8
[[Module]]
Name = "Set-net.inet.tcp.win_scale_factor"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["sysctl", "-w", "net.inet.tcp.win_scale_factor=8"] # Use sysctl to set property

# Set net.inet.tcp.autorcvbufmax=33554432
[[Module]]
Name = "Set-net.inet.tcp.autorcvbufmax"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["sysctl", "-w", "net.inet.tcp.autorcvbufmax=33554432"] # Use sysctl to set property

# Set net.inet.tcp.autosndbufmax=33554432
[[Module]]
Name = "Set-net.inet.tcp.autosndbufmax"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["sysctl", "-w", "net.inet.tcp.autosndbufmax=33554432"] # Use sysctl to set property

# Set net.inet.tcp.sendspace=1048576
[[Module]]
Name = "Set-net.inet.tcp.sendspace"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["sysctl", "-w", "net.inet.tcp.sendspace=1048576"] # Use sysctl to set property

# Set net.inet.tcp.recvspace=1048576
[[Module]]
Name = "Set-net.inet.tcp.recvspace"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["sysctl", "-w", "net.inet.tcp.recvspace=1048576"] # Use sysctl to set property

# Set net.link.generic.system.rcvq_maxlen=1024
[[Module]]
Name = "Set-net.link.generic.system.rcvq_maxlen"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["sysctl", "-w", "net.link.generic.system.rcvq_maxlen=1024"] # Use sysctl to set property

# Disable AutomaticallyInstallMacOSUpdates
[[Module]]
Name = "Disable-AutomaticallyInstallMacOSUpdates"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["/usr/bin/defaults", "write", "/Library/Preferences/com.apple.SoftwareUpdate.plist", "AutomaticallyInstallMacOSUpdates", "-bool", "false"] # Use defaults to set property

# Disable AutomaticCheckEnabled
[[Module]]
Name = "Disable-AutomaticCheckEnabled"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["/usr/bin/defaults", "write", "/Library/Preferences/com.apple.SoftwareUpdate.plist", "AutomaticCheckEnabled", "-bool", "false"] # Use defaults to set property

# Disable AutomaticDownload
[[Module]]
Name = "Disable-AutomaticDownload"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["/usr/bin/defaults", "write", "/Library/Preferences/com.apple.SoftwareUpdate.plist", "AutomaticDownload", "-bool", "false"] # Use defaults to set property

# Disable CriticalUpdateInstall
[[Module]]
Name = "Disable-CriticalUpdateInstall"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["/usr/bin/defaults", "write", "/Library/Preferences/com.apple.SoftwareUpdate.plist", "CriticalUpdateInstall", "-bool", "false"] # Use defaults to set property

# Disable ConfigDataInstall
[[Module]]
Name = "Disable-ConfigDataInstall"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["/usr/bin/defaults", "write", "/Library/Preferences/com.apple.SoftwareUpdate.plist", "ConfigDataInstall", "-bool", "false"] # Use defaults to set property

# Set a random password for ec2-user
[[Module]]
Name = "SetEC2UserPassword"
PriorityGroup = 2 # Second group
RunOnce = true # Run only on the first boot
FatalOnError = true # Must succeed
[Module.Command]
Cmd = ["/bin/zsh", "-c", "/usr/bin/dscl . -passwd /Users/ec2-user $(openssl rand -base64 18)"] # Set random password

# Set timezone as GMT
[[Module]]
Name = "SetDefaultTimezone"
PriorityGroup = 2 # Second group
RunOnce = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["systemsetup", "-settimezone", "GMT"] # Use systemsetup to set property

# Set timed to use Amazon Time Sync Service
# 169.254.169.123 is the address for Amazon Time Sync in all regions
[[Module]]
Name = "SetAmazonTimeSync"
PriorityGroup = 2 # Second group
RunOnce = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["systemsetup", "-setusingnetworktime", "on", "-setnetworktimeserver", "169.254.169.123"] # Use systemsetup to set property

# Update MOTD to contain the current OS version and name
[[Module]]
Name = "UpdateMOTD"
PriorityGroup = 2 # Second group
RunPerBoot = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["/bin/zsh", "-c", 'version="$(sysctl -n kern.osproductversion)"; sed -i "" "s/macOS.*/macOS $(echo -e "14 Mojave\n15 Catalina" | grep ^$(echo $version | cut -d"." -f2) | cut -d" " -f2) $version/" /etc/motd'] # Update /etc/motd

# Remove SSH group, if it exists
[[Module]]
Name = "RemoveSSHGroup"
PriorityGroup = 2 # Second group
RunOnce = true # Run every boot
FatalOnError = false # Best effort, don't fatal on error
[Module.Command]
Cmd = ["/bin/zsh", "-c", "dscl /Local/Default delete /Groups/com.apple.access_ssh || true"] # Use dscl to delete group

### Group 3 ###
## This group gets keys from IMDS and allows ssh access to the instance.

# Get SSH keys from IMDS
[[Module]]
Name = "GetSSHKeys"
PriorityGroup = 3 # Third group
FatalOnError = true # Exit on failure - this is required to log in.
RunPerInstance = true # Run only once per instance
[Module.SSHKeys]
GetIMDSOpenSSHKey = true # Get the key from IMDS
User = "ec2-user" # Apply the key to ec2-user
DedupKeys = true # Remove duplicate keys
OverwriteAuthorizedKeys = false # Append to authorized_keys to avoid erasing any additional keys on future instances

### Group 4 ###
## Finally, run user data.

# Attempt to execute userdata, if provided
[[Module]]
Name = "ExecuteUserData"
PriorityGroup = 4 # Fourth group
RunPerInstance = true # Run once per instance
FatalOnError = false # Best effort, don't fatal on error
[Module.UserData]
ExecuteUserData = true # Execute the userdata
